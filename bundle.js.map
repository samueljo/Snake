{"version":3,"sources":["webpack:///webpack/bootstrap f42b478fd5ff283b6ae0","webpack:///./js/main.js","webpack:///./js/snake-view.js","webpack:///./js/board.js","webpack:///./js/snake.js","webpack:///./js/coord.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA;AACA;AACA;AACA,EAAC;;;;;;;ACLD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oBAAmB,uCAAuC;AAC1D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAmB,sBAAsB;AACzC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA;;AAEA,eAAc;AACd;;AAEA;;;;;;;AC5FA;;AAEA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;;AAEA;;;;;;;ACTA;;AAEA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA,oBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,eAAc;AACd;AACA;AACA;;AAEA;;;;;;;ACvEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap f42b478fd5ff283b6ae0\n **/","const View = require('./snake-view');\n\n$( () => {\n  const view = new View($('.grid'));\n  view.drawBoard();\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/main.js\n ** module id = 0\n ** module chunks = 0\n **/","const Board = require('./board.js');\n\nclass View {\n  constructor ($el) {\n    this.$el = $el;\n    this.board = new Board(20);\n    this.setupBoard();\n\n    $(window).keydown(function(e) {\n      this.handleKeyEvent(e);\n    }.bind(this));\n\n    this.intervalID = setInterval(this.step.bind(this), 100);\n  }\n\n  handleKeyEvent (e) {\n    const direction = e.keyCode;\n    this.board.snake.turn(View.MOVES[direction]);\n  }\n\n  setupBoard () {\n    const $board = $('<ul>');\n    $board.addClass('group');\n    this.$el.append($board);\n\n    for (let i = 0; i < this.board.size * this.board.size; i++) {\n      $board.append($('<li>').addClass('tile').addClass('empty'));\n    }\n  }\n\n  step () {\n    if (this.lost()) {\n      window.alert('You lost!');\n      clearInterval(this.intervalID);\n    } else {\n      this.board.snake.move();\n      this.drawBoard();\n    }\n  }\n\n  lost() {\n    if (this.board.snake.hitSelf() || this.board.snake.hitWall()) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  getLiIndex (coord) {\n    return coord.yPos * this.board.size + coord.xPos;\n  }\n\n  drawBoard () {\n    $('li').removeClass();\n    const snakeSegs = this.board.snake.segments;\n\n    for (let i = 0; i < snakeSegs.length; i++) {\n      let snakeIdx = this.getLiIndex(snakeSegs[i]);\n      let snakeLi = $($('li').get(snakeIdx));\n\n      if (i === 0) {\n        snakeLi.addClass('snake-head');\n      }\n\n      snakeLi.addClass('snake');\n    }\n  }\n\n  // isSnake (coord) {\n  //   const $li = $($('li').get(Coord.getLiIndex(coord)));\n  //\n  //   if ($li.classList.includes(\"snake\")) {\n  //     return true;\n  //   } else {\n  //     return false;\n  //   }\n  // }\n  //\n  // isApple (coord) {\n  //   const $li = $($('li').get(Coord.getLiIndex(coord)));\n  //\n  //   if ($li.classList.includes(\"apple\")) {\n  //     return true;\n  //   } else {\n  //     return false;\n  //   }\n  // }\n}\n\nView.MOVES = { 37: \"W\", 38: \"N\", 39: \"E\", 40: \"S\" };\n            // left: 37, up: 38, right: 39, down: 40\n\nmodule.exports = View;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/snake-view.js\n ** module id = 1\n ** module chunks = 0\n **/","const Snake = require('./snake.js');\n\nclass Board {\n  constructor (size) {\n    this.size = size; // length of (square) board\n    this.snake = new Snake(this);\n  }\n}\n\nmodule.exports = Board;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/board.js\n ** module id = 2\n ** module chunks = 0\n **/","const Coord = require('./coord');\n\nclass Snake {\n  constructor (board) {\n    this.direction = \"N\"; // direction is key in DIRS (i.e. \"N\")\n    this.segments = [ new Coord(Math.floor(board.size / 2),\n                                Math.floor(board.size / 2)),\n                      new Coord(Math.floor(board.size / 2),\n                                Math.floor(board.size / 2) + 1),\n                      new Coord(Math.floor(board.size / 2),\n                                Math.floor(board.size / 2) + 2),\n                      new Coord(Math.floor(board.size / 2),\n                                Math.floor(board.size / 2) + 3),\n                      new Coord(Math.floor(board.size / 2),\n                                Math.floor(board.size / 2) + 4)];\n    this.setHead();\n  }\n\n  move () {\n    this.grow();\n    this.segments.pop();\n    this.setHead();\n  }\n\n  turn (newDirection) {\n    if (Snake.DIRS[this.direction].isOpposite(Snake.DIRS[newDirection])) {\n      this.direction = this.direction;\n    } else {\n      this.direction = newDirection;\n    }\n  }\n\n  hitSelf () {\n    for (let i = 0; i < this.segments.length; i++) {\n      if (this.segments[i].equals(this.nextMoveCoord())) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  hitWall () {\n    const newCoord = this.nextMoveCoord();\n\n    if (newCoord.xPos < 0 || newCoord.yPos < 0 || newCoord.xPos > 19 || newCoord.yPos > 19) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  nextMoveCoord () {\n    const incCoord = Snake.DIRS[this.direction];\n    return this.segments[0].plus(incCoord);\n  }\n\n  grow () {\n    this.segments.unshift(this.nextMoveCoord());\n  }\n\n  setHead () {\n    this.head = this.segments[0];\n  }\n\n}\n\nSnake.DIRS = {  \"N\": new Coord(0, -1),\n                \"S\": new Coord(0, 1),\n                \"E\": new Coord(1, 0),\n                \"W\": new Coord(-1, 0)};\n\nmodule.exports = Snake;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/snake.js\n ** module id = 3\n ** module chunks = 0\n **/","class Coord {\n  constructor (xPos, yPos, boardSize) {\n    this.xPos = xPos;\n    this.yPos = yPos;\n    this.boardSize = boardSize;\n  }\n\n  plus (otherCoord) {\n    const newX = this.xPos + otherCoord.xPos;\n    const newY = this.yPos + otherCoord.yPos;\n    const newCoord = new Coord(newX, newY);\n    return newCoord;\n  }\n\n  equals (otherCoord) {\n    return ((this.xPos === otherCoord.xPos) && (this.yPos === otherCoord.yPos));\n  }\n\n  isOpposite (otherCoord) {\n    if (otherCoord.xPos + this.xPos === 0 && otherCoord.yPos + this.yPos === 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nmodule.exports = Coord;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/coord.js\n ** module id = 4\n ** module chunks = 0\n **/"],"sourceRoot":""}